/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Buy = ContractEventLog<{
  bought: string;
  payed: string;
  0: string;
  1: string;
}>;
export type Claim = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type ClaimRised = ContractEventLog<{
  eth: string;
  usdt: string;
  usdc: string;
  zeroGas: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type Withdraw = ContractEventLog<{
  eth: string;
  usdt: string;
  usdc: string;
  0: string;
  1: string;
  2: string;
}>;

export interface CrowdsaleAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CrowdsaleAbi;
  clone(): CrowdsaleAbi;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    NATIVE(): NonPayableTransactionObject<string>;

    SIGNER_ROLE(): NonPayableTransactionObject<string>;

    buy(
      token: string,
      payed: number | string | BN,
      bought: number | string | BN,
      expirationTime: number | string | BN,
      signature: string | number[]
    ): PayableTransactionObject<void>;

    claim(): NonPayableTransactionObject<void>;

    claimRised(): NonPayableTransactionObject<void>;

    getAllowable(user: string): NonPayableTransactionObject<string[]>;

    getPrice(): NonPayableTransactionObject<{
      price: string;
      denominator: string;
      0: string;
      1: string;
    }>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getStage(): NonPayableTransactionObject<string>;

    getTimestamps(): NonPayableTransactionObject<string[][]>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hardcap(): NonPayableTransactionObject<string>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    initiate(
      sellStart: number | string | BN
    ): NonPayableTransactionObject<void>;

    maxPurchase(): NonPayableTransactionObject<string>;

    minPurchase(): NonPayableTransactionObject<string>;

    refund(): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    seldD(): NonPayableTransactionObject<void>;

    sellEnd(): NonPayableTransactionObject<string>;

    softcap(): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    tokens(arg0: number | string | BN): NonPayableTransactionObject<string>;

    totalBought(): NonPayableTransactionObject<string>;

    totalClaimed(): NonPayableTransactionObject<string>;

    userToBalance(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    zeroGas(): NonPayableTransactionObject<string>;
  };
  events: {
    Buy(cb?: Callback<Buy>): EventEmitter;
    Buy(options?: EventOptions, cb?: Callback<Buy>): EventEmitter;

    Claim(cb?: Callback<Claim>): EventEmitter;
    Claim(options?: EventOptions, cb?: Callback<Claim>): EventEmitter;

    ClaimRised(cb?: Callback<ClaimRised>): EventEmitter;
    ClaimRised(options?: EventOptions, cb?: Callback<ClaimRised>): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Buy", cb: Callback<Buy>): void;
  once(event: "Buy", options: EventOptions, cb: Callback<Buy>): void;

  once(event: "Claim", cb: Callback<Claim>): void;
  once(event: "Claim", options: EventOptions, cb: Callback<Claim>): void;

  once(event: "ClaimRised", cb: Callback<ClaimRised>): void;
  once(
    event: "ClaimRised",
    options: EventOptions,
    cb: Callback<ClaimRised>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
